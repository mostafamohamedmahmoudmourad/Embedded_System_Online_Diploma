
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c8  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f1  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001609  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_1>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_2>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InterruptInit>:


void InterruptInit()
{
	//Any logical change on INT0 generates an interrupt request.
	MCUCR |=  (1<<ISC00);
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC01);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	85 bf       	out	0x35, r24	; 53
	
	//The rising edge of INT1 generates an interrupt request.
	MCUCR |= (1<<ISC10) | (1<<ISC11);
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	8c 60       	ori	r24, 0x0C	; 12
  7c:	85 bf       	out	0x35, r24	; 53
	
	//The falling edge of INT2 generates an interrupt request.
	MCUCR &= ~(1<<ISC2);
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	8f 7b       	andi	r24, 0xBF	; 191
  82:	85 bf       	out	0x35, r24	; 53
	
	//Enable INT0, INT1, INT2.
	GICR |= (1<<INT0) | (1<<INT1) | (1<<INT2);
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 6e       	ori	r24, 0xE0	; 224
  88:	8b bf       	out	0x3b, r24	; 59
	
	 //Global Interrupt Enable
	 //The I-bit can also be setand cleared by the application with the SEI and CLI instructions,
	 sei();
  8a:	78 94       	sei
  8c:	08 95       	ret

0000008e <main>:
}

int main(void)
{
	//Set Data Direction.
	DDRD = 0b11100000;	// Set PD5, PD6 AND PD7  Output
  8e:	80 ee       	ldi	r24, 0xE0	; 224
  90:	81 bb       	out	0x11, r24	; 17
	
	InterruptInit();	
  92:	0e 94 36 00 	call	0x6c	; 0x6c <InterruptInit>
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x8>

00000098 <__vector_1>:
    {
    }
}

ISR(INT0_vect)
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
	PORTD |= (1<<PD5);		//Turn on LED connected to PD5.
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 e2       	ldi	r24, 0x23	; 35
  b2:	94 ef       	ldi	r25, 0xF4	; 244
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__vector_1+0x1c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x26>
  be:	00 00       	nop
	_delay_ms(1000);		//Delay for One Second.
	PORTD &= ~(1<<PD5);		//Turn off LED connected to PD5.
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	82 bb       	out	0x12, r24	; 18
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_2>:

ISR(INT1_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	PORTD |= (1<<PD6);		//Turn on LED connected to PD6.
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	83 e2       	ldi	r24, 0x23	; 35
  f0:	94 ef       	ldi	r25, 0xF4	; 244
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__vector_2+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__vector_2+0x26>
  fc:	00 00       	nop
	_delay_ms(1000);		//Delay for One Second.
	PORTD &= ~(1<<PD6);		//Turn off LED connected to PD6.
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8f 7b       	andi	r24, 0xBF	; 191
 102:	82 bb       	out	0x12, r24	; 18
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_3>:

ISR(INT2_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	PORTD |= (1<<PD7);		//Turn on LED connected to PD7.
 124:	82 b3       	in	r24, 0x12	; 18
 126:	80 68       	ori	r24, 0x80	; 128
 128:	82 bb       	out	0x12, r24	; 18
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	83 e2       	ldi	r24, 0x23	; 35
 12e:	94 ef       	ldi	r25, 0xF4	; 244
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <__vector_3+0x1c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <__vector_3+0x26>
 13a:	00 00       	nop
	_delay_ms(1000);		//Waiting 1 Second.
	PORTD &= ~(1<<PD7);		//Turn off LED connected to PD7.
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	8f 77       	andi	r24, 0x7F	; 127
 140:	82 bb       	out	0x12, r24	; 18
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
