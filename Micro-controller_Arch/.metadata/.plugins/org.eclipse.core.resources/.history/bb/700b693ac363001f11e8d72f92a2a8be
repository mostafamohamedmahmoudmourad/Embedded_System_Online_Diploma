/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


#include "stdint.h"
#include <stdio.h>
#include <stdlib.h>

typedef volatile uint32_t    vuint32_t;


// RCC
#define RCC_BASE        0x40021000
#define RCC_APB2ENR     *((vuint32_t *)(RCC_BASE + 0x18))
#define RCC_IOPAEN      (1<<2)



//GPIO
#define GPIOA_BASE      0x40010800
#define GPIOA_CRH       *((vuint32_t *)(PORTA_BASE + 0x04))
#define GPIOA_ODR       *((vuint32_t *)(PORTA_BASE + 0x0C))

#define GPIOx_CRL       *((vuint32_t *)(PORTA_BASE + 0x00))


//EXTI
#define EXTI_BASE      0x4001 0400
#define EXTI_IMR       *((vuint32_t *)(EXTI_BASE + 0x00))
#define EXTI_RTSR       *((vuint32_t *)(EXTI_BASE + 0x08))
#define EXTI_PR       *((vuint32_t *)(EXTI_BASE + 0x14))

//NVIC
#define NVIC_ISER0       *((vuint32_t *)(0xE000E100))

//AFIO
#define AFIO_BASE      0x4001 0000
#define AFIO_EXTICR1       *((vuint32_t *)(AFIO_BASE +  0x08))


void clock_init()
{
	//Enable clock GPIOA
    RCC_APB2ENR |= RCC_IOPAEN;

    RCC_APB2ENR |= (1<<0);
}

void GPIOA_init()
{
	//pin 13 port A output
	GPIOA_CRH &= 0xFF0FFFFF;
	GPIOA_CRH |= 0x00200000;
	// Floating input (reset state)
	GPIOx_CRL |= (1<<2);
}




int main(void)
{
	clock_init();
	GPIOA_init();


	//Enable EXTI line0 (Mask 1)
	EXTI_IMR |= (1<<0);

	// Enable  Rising trigger
	EXTI_RTSR |= (1<<0);

	// Enable NVIC IQR 6 (EXTI0)
	NVIC_ISER0 |= (1<<6);

	//Select port A for EXTI0
	AFIO_EXTICR1 = 0x0;

    while(1);


}

void EXTI0_IRQHandler(void)
{
	//toggle led port A pin 13
	GPIOA_ODR ^= (1<<13);

	//clear pending Request for line 0
	EXTI_PR |= (1<<0);


}

