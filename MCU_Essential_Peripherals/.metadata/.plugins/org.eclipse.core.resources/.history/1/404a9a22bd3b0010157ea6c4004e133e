///**
// ******************************************************************************
// * @file           : main.c
// * @author         : Auto-generated by STM32CubeIDE
// * @brief          : Main program body
// ******************************************************************************
// * @attention
// *
// * <h2><center>&copy; Copyright (c) 2025 STMicroelectronics.
// * All rights reserved.</center></h2>
// *
// * This software component is licensed by ST under BSD 3-Clause license,
// * the "License"; You may not use this file except in compliance with the
// * License. You may obtain a copy of the License at:
// *                        opensource.org/licenses/BSD-3-Clause
// *
// ******************************************************************************
// */
//
//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif
//
//
//#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6.h"
//#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6_GPIO_driver.h"
//#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6_EXTI_driver.h"
//#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6_USART_driver.h"
//#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6_SPI_driver.h"
//
////#include "keypad.h"
////#include "LCD.h"
//
//
//
////#define MCU_SLAVE
//#define MCU_MASTER
//
//
//
//
//
//uint8_t IRQ_flag ;
//
//void wait(int x)
//{
//	int i,j;
//	for (i=0;i<x;i++)
//		for(j=0;j<x;j++);
//}
//
//
//void clk_Init(void)
//{
//	//Enable clock for GPIO A
//	RCC_GPIOA_CLK_EN() ;
//	//Enable clock for GPIO B
//	RCC_GPIOB_CLK_EN() ;
//	//Enable clock for AFIO
//	RCC_AFIO_CLK_EN();
//}
//
//
//unsigned char ch;
//
//void UART_IRQ_CallBack(void)
//{
//#ifdef MCU_MASTER
//	MCAL_UART_ReceiveData(USART1, &ch, disable);
//	MCAL_UART_SendData(USART1, &ch, disable);
//	//Send Data to SPI
//	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
//	MCAL_SPI_Send_Recieve(SPI1, &ch, enable);
//	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
//
//#endif
//
//}
//
//
//
//int main(void)
//{
//	clk_Init();
//	//UART Init
//	USART_Config_t UART_Config;
//	UART_Config.BaudRate = UART_BaudRate_115200;
//	UART_Config.FlowCtrl = USART_FlowCtrl_NONE;
//	UART_Config.IRQ_Enable = USART_IRQ_EN_RXNEIE;
//	UART_Config.Ptr_IRQ_CallBack = UART_IRQ_CallBack;
//	UART_Config.Parity = USART_PARITY_NONE;
//	UART_Config.Data_Length = USART_DATA_LEGNTH_8BIT;
//	UART_Config.Stop_Bits = USART_StopBits_1;
//	UART_Config.USART_MODE = UART_MODE_TX_RX;
//	MCAL_UART_Init(USART1, &UART_Config);
//	MCAL_UART_GPIO_Set_Pins(USART1);
//
//	//SPI Init
//	SPI_Config_t SPI_Config;
//
//	SPI_Config.Clock_Phase = SPI_Clock_Phase_2nd_EDGE_Data_Capture;
//	SPI_Config.Clock_Polarity = SPI_Clock_Polarity_HIGH_IDLE;
//	SPI_Config.Data_Size = SPI_DataSize_8BIT;
//	SPI_Config.Frame_Format = SPI_Frame_MSB_First;
//	//Pclk Default = 8MHz
//	SPI_Config.BaudRate_PreScaler = SPI_BaudRate_Prescaler_8;
//
//#ifdef MCU_MASTER
//	SPI_Config.Device_MODE = SPI_Device_Mode_MASTER;
//	SPI_Config.IRQ_Enable = SPI_IRQ_Enable_NONE;
//	SPI_Config.NSS_Mode = SPI_NSS_SOFTWARE_SET_BIT;
//	SPI_Config.Ptr_IRQ_CallBack = NULL;
//
//#endif
//
//#ifdef MCU_SLAVE
//	SPI_Config.Device_MODE = SPI_Device_Mode_SLAVE;
//
//
//
//#endif
//
//
//	MCAL_SPI_Init(SPI1, &SPI_Config);
//	MCAL_SPI_GPIO_Set_Pins(SPI1);
//
//	//Configure Slave Select on PA4 by GPIO
//	GPIO_PinConfig_t PinConfig;
//	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
//	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
//	MCAL_GPIO_Init(GPIOA, &PinConfig);
//	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
//
//	while(1)
//	{
//	}
//
//
//}







/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>Â© Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#define __SOFT_FP__ /* Suppress FPU warning */

#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6.h"
#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6_GPIO_driver.h"
#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6_EXTI_driver.h"
#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6_USART_driver.h"
#include "../stm32_f103C6_Drivers/MCAL/inc/stm32f103x6_SPI_driver.h"

#define MCU_MASTER
//#define MCU_SLAVE

void wait(int x)
{
    int i, j;
    for (i = 0; i < x; i++)
        for (j = 0; j < x; j++);
}

void clk_Init(void)
{
    // Enable clock for GPIOA
    RCC_GPIOA_CLK_EN();
    // Enable clock for GPIOB
    RCC_GPIOB_CLK_EN();
    // Enable clock for AFIO
    RCC_AFIO_CLK_EN();
    // Enable clock for USART1
    RCC_USART1_CLK_EN();
    // Enable clock for SPI1
    RCC_SPI1_CLK_EN();
}

unsigned char ch;

void UART_IRQ_CallBack(void)
{
#ifdef MCU_MASTER
    MCAL_UART_ReceiveData(USART1, &ch, USART_disable);
    MCAL_UART_SendData(USART1, &ch, USART_disable);
    // Send Data to SPI
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
    MCAL_SPI_TX_RX(SPI1, &ch, SPI_enable);
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif
}

int main(void)
{
    clk_Init();

    // UART Init
    USART_Config_t UART_Config;
    UART_Config.BaudRate = UART_BaudRate_115200;
    UART_Config.HwFlowCtl = UART_HwFlowCtl_NONE;
    UART_Config.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
    UART_Config.Ptr_IRQ_CallBack = UART_IRQ_CallBack;
    UART_Config.Parity = UART_Parity_NONE;
    UART_Config.Payload_Length = UART_Payload_Length_8B;
    UART_Config.StopBits = UART_StopBits_1;
    UART_Config.USART_Mode = UART_Mode_TX_RX;
    MCAL_UART_Init(USART1, &UART_Config);
    MCAL_UART_GPIO_Set_Pins(USART1);
    NVIC_IRQ37_USART1_Enable(); // Enable USART1 interrupt in NVIC

    // SPI Init
    SPI_Config_t SPI_Config;
    SPI_Config.Clock_Phase = CLK_PHASE_SECOND;
    SPI_Config.Clock_Polarity = CLK_POLARITY_IDLE_HIGH;
    SPI_Config.Data_Size = FRAME_SIZE_8BIT;
    SPI_Config.Frame_Format = FRAME_FORMAT_MSB_FIRST;
    SPI_Config.BaudRate_Prescaler = BAUDERATE_PRESCALER_8;
    SPI_Config.SPI_Mode = SPI_MODE_MASTER;
    SPI_Config.Communication_Mode = COMMUNICATION_MODE_2LINE_FULL_DUPLEX;
    SPI_Config.NSS = NSS_SW_SSI_SET;
    SPI_Config.IRQ_Enable = IRQ_ENABLE_NONE;
    SPI_Config.P_IRQ_CallBack = NULL;

    MCAL_SPI_Init(SPI1, &SPI_Config);
    MCAL_SPI_GPIO_Set_Pins(SPI1);

    // Configure Slave Select on PA4 by GPIO
    GPIO_PinConfig_t PinConfig;
    PinConfig.GPIO_PinNumber = GPIO_PIN_4;
    PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
    PinConfig.GPIO_Speed = GPIO_SPEED_10M;
    MCAL_GPIO_Init(GPIOA, &PinConfig);
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);

    while (1)
    {
    }
}
